# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/forecast.ipynb.

# %% auto 0
__all__ = ['Forecast']

# %% ../nbs/forecast.ipynb 3
import reprlib
from typing import Callable, List, Optional

import pandas as pd

from .core import TimeSeries
from .utils import backtest_splits

# %% ../nbs/forecast.ipynb 6
class Forecast:
    """Full pipeline encapsulation.

    Takes a model or list of models (scikit-learn compatible regressors) and TimeSeries
    and runs all the forecasting pipeline."""

    def __init__(self, models, ts: TimeSeries):
        if not isinstance(models, list):
            models = [models]
        self.models = models
        self.ts = ts

    def __repr__(self):
        return (
            f"Forecast(models={reprlib.repr(self.models)}, ts={reprlib.repr(self.ts)})"
        )

    @property
    def freq(self):
        return self.ts.freq

    def preprocess(
        self,
        data: pd.DataFrame,
        static_features: Optional[List[str]] = None,
        dropna: bool = True,
        keep_last_n: Optional[int] = None,
    ) -> pd.DataFrame:
        return self.ts.fit_transform(data, static_features, dropna, keep_last_n)

    def fit(
        self,
        data: pd.DataFrame,
        static_features: Optional[List[str]] = None,
        dropna: bool = True,
        keep_last_n: Optional[int] = None,
        **fit_kwargs,
    ) -> "Forecast":
        """Preprocesses `data` and fits `model` to it."""
        series_df = self.preprocess(data, static_features, dropna, keep_last_n)
        X, y = series_df.drop(columns=["ds", "y"]), series_df.y.values
        del series_df
        for model in self.models:
            model.fit(X, y, **fit_kwargs)
        return self

    def predict(
        self,
        horizon: int,
        dynamic_dfs: Optional[List[pd.DataFrame]] = None,
        predict_fn: Optional[Callable] = None,
        **predict_fn_kwargs,
    ) -> pd.DataFrame:
        """Compute the predictions for the next `horizon` steps.

        `predict_fn(model, new_x, features_order, **predict_fn_kwargs)` is called in every timestep, where:
        `model` is the trained model.
        `new_x` is a dataframe with the same format as the input plus the computed features.
        `features_order` is the list of column names that were used in the training step.
        """
        return self.ts.predict(
            self.models, horizon, dynamic_dfs, predict_fn, **predict_fn_kwargs
        )

    def cross_validation(
        self,
        data,
        n_windows: int,
        window_size: int,
        static_features: Optional[List[str]] = None,
        dropna: bool = True,
        keep_last_n: Optional[int] = None,
        dynamic_dfs: Optional[List[pd.DataFrame]] = None,
        predict_fn: Optional[Callable] = None,
        **predict_fn_kwargs,
    ):
        """Creates `n_windows` splits of `window_size` from `data`, trains the model
        on the training set, predicts the window and merges the actuals and the predictions
        in a dataframe.

        Returns a dataframe containing the datestamps, actual values, train ends and predictions."""
        results = []
        for train_end, train, valid in backtest_splits(
            data, n_windows, window_size, self.freq
        ):
            self.fit(train, static_features, dropna, keep_last_n)
            y_pred = self.predict(
                window_size, dynamic_dfs, predict_fn, **predict_fn_kwargs
            )
            result = valid[["ds", "y"]].copy()
            result["cutoff"] = train_end
            result = result.merge(y_pred, on=["unique_id", "ds"], how="left")
            results.append(result)

        from mlforecast.compat import dd_concat

        concat_fn = pd.concat if isinstance(data, pd.DataFrame) else dd_concat
        return concat_fn(results)
