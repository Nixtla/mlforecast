name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

defaults:
  run:
    shell: bash -l {0}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  nb-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4

      - name: Install nbdev
        run: pip install nbdev

      - name: Check if all notebooks are cleaned
        run: |
          echo "Check we are starting with clean git checkout"
          if [ -n "$(git status -uno -s)" ]; then echo "git status is not clean"; false; fi
          echo "Trying to strip out notebooks"
          ./action_files/clean_nbs
          echo "Check that strip out was unnecessary"
          git status -s # display the status to see which nbs need cleaning up
          if [ -n "$(git status -uno -s)" ]; then echo -e "!!! Detected unstripped out notebooks\n!!!Remember to run nbdev_install_hooks"; false; fi

  run-all-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Set up environment
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: environment.yml
          create-args: python=${{ matrix.python-version }}
          cache-environment: true

      - name: Install the library
        run: pip install ./

      - name: Run all tests
        run: nbdev_test --n_workers 1 --do_print --timing

  run-local-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Set up environment
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: local_environment.yml
          create-args: python=${{ matrix.python-version }}
          cache-environment: true

      - name: Install the library
        run: pip install ./

      - name: Run local tests
        run: nbdev_test --n_workers 1 --do_print --timing --skip_file_glob "*distributed*"

  check-deps:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 

      - name: Install the library and import it
        run: |
          pip install .
          python -c 'import mlforecast'
